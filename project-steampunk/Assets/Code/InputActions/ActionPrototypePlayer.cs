//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Code/InputActions/ActionPrototypePlayer.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionPrototypePlayer: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionPrototypePlayer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionPrototypePlayer"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c9fa1801-b5bb-4440-ac49-4026a14f77d0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a971e148-4528-44a9-8547-ba19fd459e1d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9388bc9b-21b3-459e-9520-b8c294b04116"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""8991b75f-27ea-4f8f-b982-1b0810303bd2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""2fc03f25-2008-47ee-b92d-14f03e58cacc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""bc8c419d-ab29-433a-812e-31f72a6e3fd0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kick"",
                    ""type"": ""Button"",
                    ""id"": ""79fb2049-58bf-4c9b-96e2-dfe6dea11003"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tackle"",
                    ""type"": ""Button"",
                    ""id"": ""1728b823-1802-4f35-b82f-4b6eb2b8e6a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickOrThrow"",
                    ""type"": ""Button"",
                    ""id"": ""1d0e5583-7515-4e34-8473-f081f323d981"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""1337b473-fa2f-481f-855c-a311d94ba19e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchFire"",
                    ""type"": ""Button"",
                    ""id"": ""9429e25c-4b69-45c3-98e3-9bfc922ef0c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchElectro"",
                    ""type"": ""Button"",
                    ""id"": ""62a8ef36-fe9b-4490-9d3a-2aa04666c35f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchEarth"",
                    ""type"": ""Button"",
                    ""id"": ""7a8338fb-bb21-4458-b11f-f975768075f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWater"",
                    ""type"": ""Button"",
                    ""id"": ""2a5302fb-720e-45f2-be28-2d028e928cd6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8595859c-f18a-4788-b613-f4044908c4bd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a462929b-beb0-43dd-84c0-2dc82149ef73"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9dee0b39-ae5b-48d0-9649-c90a0ceb5dbd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d74d1964-68cd-4b99-a76d-53bcb0fecd94"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b985a2f1-cbd0-4c3f-ade5-1262d14bf43a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5c1db7f9-8614-476a-b55a-9a70c54f270e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2bdda13-b5f5-4164-8bed-3b2d25e73521"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efe993ec-600e-4dc5-9761-155de1981d04"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5409dd5-0cf6-4e99-83c2-03ef0392f389"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f3b60e2-57c0-4beb-837c-126771861c30"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4a798bf-d4c6-4e8c-9f2d-5755cfb616dc"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tackle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc77e0fe-314f-4c2d-9eed-cc0217f80ace"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickOrThrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c35ce583-4fff-4403-960a-7e3a54d8b1ee"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88593db5-b02b-4146-8bcb-5fd629c29815"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""247dab4f-9867-4ba3-8579-b494ae7bdfe3"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchElectro"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38ea31fb-0c4c-44d5-bfae-8f73902afc64"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchEarth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af5ae5d1-c31d-4dbc-9108-a3f93b432af7"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWater"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""0355e5b9-62fa-44e1-895b-32ba0b4398e8"",
            ""actions"": [
                {
                    ""name"": ""SenseESCBuild"",
                    ""type"": ""Button"",
                    ""id"": ""25ed69ab-212e-4197-a76f-396f911dedb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7df22e06-d891-4606-8ba6-c1ceefabbb38"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SenseESCBuild"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
        m_Player_Kick = m_Player.FindAction("Kick", throwIfNotFound: true);
        m_Player_Tackle = m_Player.FindAction("Tackle", throwIfNotFound: true);
        m_Player_PickOrThrow = m_Player.FindAction("PickOrThrow", throwIfNotFound: true);
        m_Player_Reload = m_Player.FindAction("Reload", throwIfNotFound: true);
        m_Player_SwitchFire = m_Player.FindAction("SwitchFire", throwIfNotFound: true);
        m_Player_SwitchElectro = m_Player.FindAction("SwitchElectro", throwIfNotFound: true);
        m_Player_SwitchEarth = m_Player.FindAction("SwitchEarth", throwIfNotFound: true);
        m_Player_SwitchWater = m_Player.FindAction("SwitchWater", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_SenseESCBuild = m_UI.FindAction("SenseESCBuild", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_Shoot;
    private readonly InputAction m_Player_Kick;
    private readonly InputAction m_Player_Tackle;
    private readonly InputAction m_Player_PickOrThrow;
    private readonly InputAction m_Player_Reload;
    private readonly InputAction m_Player_SwitchFire;
    private readonly InputAction m_Player_SwitchElectro;
    private readonly InputAction m_Player_SwitchEarth;
    private readonly InputAction m_Player_SwitchWater;
    public struct PlayerActions
    {
        private @ActionPrototypePlayer m_Wrapper;
        public PlayerActions(@ActionPrototypePlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
        public InputAction @Kick => m_Wrapper.m_Player_Kick;
        public InputAction @Tackle => m_Wrapper.m_Player_Tackle;
        public InputAction @PickOrThrow => m_Wrapper.m_Player_PickOrThrow;
        public InputAction @Reload => m_Wrapper.m_Player_Reload;
        public InputAction @SwitchFire => m_Wrapper.m_Player_SwitchFire;
        public InputAction @SwitchElectro => m_Wrapper.m_Player_SwitchElectro;
        public InputAction @SwitchEarth => m_Wrapper.m_Player_SwitchEarth;
        public InputAction @SwitchWater => m_Wrapper.m_Player_SwitchWater;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Kick.started += instance.OnKick;
            @Kick.performed += instance.OnKick;
            @Kick.canceled += instance.OnKick;
            @Tackle.started += instance.OnTackle;
            @Tackle.performed += instance.OnTackle;
            @Tackle.canceled += instance.OnTackle;
            @PickOrThrow.started += instance.OnPickOrThrow;
            @PickOrThrow.performed += instance.OnPickOrThrow;
            @PickOrThrow.canceled += instance.OnPickOrThrow;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @SwitchFire.started += instance.OnSwitchFire;
            @SwitchFire.performed += instance.OnSwitchFire;
            @SwitchFire.canceled += instance.OnSwitchFire;
            @SwitchElectro.started += instance.OnSwitchElectro;
            @SwitchElectro.performed += instance.OnSwitchElectro;
            @SwitchElectro.canceled += instance.OnSwitchElectro;
            @SwitchEarth.started += instance.OnSwitchEarth;
            @SwitchEarth.performed += instance.OnSwitchEarth;
            @SwitchEarth.canceled += instance.OnSwitchEarth;
            @SwitchWater.started += instance.OnSwitchWater;
            @SwitchWater.performed += instance.OnSwitchWater;
            @SwitchWater.canceled += instance.OnSwitchWater;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Kick.started -= instance.OnKick;
            @Kick.performed -= instance.OnKick;
            @Kick.canceled -= instance.OnKick;
            @Tackle.started -= instance.OnTackle;
            @Tackle.performed -= instance.OnTackle;
            @Tackle.canceled -= instance.OnTackle;
            @PickOrThrow.started -= instance.OnPickOrThrow;
            @PickOrThrow.performed -= instance.OnPickOrThrow;
            @PickOrThrow.canceled -= instance.OnPickOrThrow;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @SwitchFire.started -= instance.OnSwitchFire;
            @SwitchFire.performed -= instance.OnSwitchFire;
            @SwitchFire.canceled -= instance.OnSwitchFire;
            @SwitchElectro.started -= instance.OnSwitchElectro;
            @SwitchElectro.performed -= instance.OnSwitchElectro;
            @SwitchElectro.canceled -= instance.OnSwitchElectro;
            @SwitchEarth.started -= instance.OnSwitchEarth;
            @SwitchEarth.performed -= instance.OnSwitchEarth;
            @SwitchEarth.canceled -= instance.OnSwitchEarth;
            @SwitchWater.started -= instance.OnSwitchWater;
            @SwitchWater.performed -= instance.OnSwitchWater;
            @SwitchWater.canceled -= instance.OnSwitchWater;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_SenseESCBuild;
    public struct UIActions
    {
        private @ActionPrototypePlayer m_Wrapper;
        public UIActions(@ActionPrototypePlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @SenseESCBuild => m_Wrapper.m_UI_SenseESCBuild;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @SenseESCBuild.started += instance.OnSenseESCBuild;
            @SenseESCBuild.performed += instance.OnSenseESCBuild;
            @SenseESCBuild.canceled += instance.OnSenseESCBuild;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @SenseESCBuild.started -= instance.OnSenseESCBuild;
            @SenseESCBuild.performed -= instance.OnSenseESCBuild;
            @SenseESCBuild.canceled -= instance.OnSenseESCBuild;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
        void OnTackle(InputAction.CallbackContext context);
        void OnPickOrThrow(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnSwitchFire(InputAction.CallbackContext context);
        void OnSwitchElectro(InputAction.CallbackContext context);
        void OnSwitchEarth(InputAction.CallbackContext context);
        void OnSwitchWater(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnSenseESCBuild(InputAction.CallbackContext context);
    }
}
